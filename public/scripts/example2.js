
// Top level component - represet the App in this case
let CommentBox = React.createClass({

    // Get initial state
    getInitialState(){
        return {data: []};
    },

    // Server call method
    loadCommentsFromServer(){
        // Necessary as of the conflict between .bind(this) in ES6
        let _this = this;
        $.ajax({
            url: this.props.url,
            dataType: 'json',
            cache: false,
            success(data){
                // Update the state of the component
                _this.setState({data});
            },
            error(xhr, status, err){
                // Handle errors if any
                console.error(_this.props.url, status, err.toString())
            }
        });
    },

    // Submit new comment to the server
    handleCommentSubmit(comment){

        // Cache the state of the comments data
        let comments = this.state.data;
        // Optimistically set an id on the new comment. It will be replaced by an
        // id generated by the server. In a production application you would likely
        // not use Date.now() for this and would have a more robust system in place.
        comment.id = Date.now();
        // Add the new comment to the data/state
        let newComments = comments.concat([comment]);
        this.setState({data: newComments});

        // Necessary as of the conflict between .bind(this) in ES6
        let _this = this;
        $.ajax({
            url: this.props.url,
            dataType: 'json',
            type: 'POST',
            data: comment,
            success(data) {
                // If all good it will simply try to add the new comment
                // This will not going to trigger DOM changes because of the React's nature
                // and the virtual DOM
                _this.setState({data});
            },
            error(xhr, status, err) {
                // If error returned reset the state to the cached version
                this.setState({data: comments});
                console.error(_this.props.url, status, err.toString());
            }
        });
    },

    // Method called automatically after the componenet is rendered
    // for the first time.
    componentDidMount(){

        // Request data
        this.loadCommentsFromServer();
        // Every 2 seconds
        setInterval(this.loadCommentsFromServer(), this.props.pollInterval);

    },

    // Component's render method
    render(){
        return (
            <div className="commentBox">
                <h1>Comments</h1>
                <CommentList data={this.state.data} />
                <CommentForm onCommentSubmit={this.handleCommentSubmit}/>
            </div>
        );
    }
});

// CommentList component
let CommentList = React.createClass({

    // Component's render method
    render(){
        // Access the data passed from the parent via this.props
        // Iterate and create <Comment /> component for each data entry
        let commentNodes = this.props.data.map((comment) => {
            return (
                // Creates component with the coresponding data context
                <Comment author={comment.author} key={comment.id} >
                    {comment.text}
                </Comment>
            );
        });

        // Render the completed comments list
        return (
            <div className="commentList">
                {commentNodes}
            </div>
        );
    }
});

// CommentForm component
let CommentForm = React.createClass({

    // Get initial state when the component is rendered for the first time
    getInitialState(){
        return {author: '', text: ''};
    },

    // The following methods are taking care of synchronising the DOM with the
    // App's state on every input change.

    // Event handler for the author input change
    handleAuthorChange(e){
        this.setState({author: e.target.value});
    },

    // Event handler for the text input change
    handleTextChange(e){
        this.setState({text: e.target.value});
    },

    // Event handler for the form submition
    handleSubmit(e){
        e.preventDefault();

        // Trim input
        let author = this.state.author.trim();
        let text = this.state.text.trim();

        // Ensure truthy values are passed to the server
        if(!text || !author){
            return;
        }

        // Access the handler passed from the parent component
        this.props.onCommentSubmit({author, text});
        // Reset the form
        this.setState({author: '', text: ''});
    },

    // Component's render function
    render(){
        return (
            <form className="commentForm" onSubmit={this.handleSubmit}>
                <input
                    type="text"
                    placeholder="Your name"
                    value={this.state.author}
                    onChange={this.handleAuthorChange}
                />
                <input
                    type="text"
                    placeholder="Say something..."
                    value={this.state.text}
                    onChange={this.handleTextChange}
                />
                <input type="submit" value="Post" />
            </form>
        );
    }
});

// Comment component
let Comment = React.createClass({

    // Method to handler html strings
    rawMarkup(){
        let rawMarkup = marked(this.props.children.toString(), {sanitize: true});
        return { __html: rawMarkup };
    },

    // Components render method
    render(){
        return (
            <div className="comment">
                <h2 className="commentAuthor">
                    {this.props.author}
                </h2>
                <span dangerouslySetInnerHTML={this.rawMarkup()} />
            </div>
        );
    }
});

// ReactDOM module to handle actual DOM operations
ReactDOM.render(
    <CommentBox url="/api/comments" pollInterval={2000} />,
    document.querySelector('#content')
);
